<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>videoChatApp</title>
    <link rel="stylesheet" href="style.css" />
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://kit.fontawesome.com/c939d0e917.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script type="text/javascript" src="https://flashphoner.com/downloads/builds/flashphoner_client/wcs_api-2.0/current/flashphoner.js"></script>
    <script type="text/javascript" src="screen-sharing-min.js"></script>
    <script>
      const ROOM_ID = "<%= roomId %>";
    </script>

    <style>
      .start-btn, .stop-btn, .download-btn{
        width: 200px;
  height: 60px;
  /* margin-bottom: 200px; */
  font-size: 25px;
  border-radius: 10px;
  border:none;
  color: gray;
  background-color: #F7F9FA;
  box-shadow: 0px 6px 18px -9px rgba(0, 0, 0, 0.75);
    transition: transform 100ms ease-in;
	outline: none;
	margin-left: 10px;
      }
    </style>

  </head>
  <!-- <body onload="init_api()"> -->
  <body >
    
    <div class="header" >
      <div class="logo">
        <div class="header__back">
          <i class="fas fa-angle-left"></i>
        </div>
        <h3>Video Chat</h2>
      </div>
    </div>  
    <div class="main">  
    <div class="main__left">
      <div class="videos__group">
        <div id="video-grid">

        </div>
      </div>
      <div class="options">
        <div class="options__left">
          <div id="stopVideo" class="options__button">
            <i class="fa fa-video-camera"></i>
          </div>
          <div id="muteButton" class="options__button">
            <i class="fa fa-microphone"></i>
          </div>
          <div id="showChat" class="options__button">
            <i class="fa fa-comment"></i>
          </div>
        </div>
        <div class="options__right">
          <div id="inviteButton" class="options__button">
            <i class="fas fa-user-plus"></i>

          </div>
        </div>
      </div>
    </div>
    <div class="main__right">
      <div class="main__chat_window">
          <div class="messages">

          </div>
      </div>
      <div class="main__message_container">
        <input id="chat_message" type="text" autocomplete="off" placeholder="Type message here...">
        <div id="send" class="options__button">
          <i class="fa fa-paper-plane" aria-hidden="true"></i>
        </div>
      </div>
    </div>
  </div>
  <script src="script.js"></script>
  
  <!--  -->
  <div style="float: left" >
    <video class="recording" autoplay muted width="500px" 
           height="500px" hidden></video>
</div>
<div style="display: flex; flex-direction:row; ">
  <div class="LeftDownload" style="">
    <h1>OUTPUT</h1>
    <video class="output" autoplay controls width="500px" 
           height="500px"></video>
     </div>
    
     <div class="RightDownload" style="margin-top: 180px ; margin-left:50px;  ">
    <button class="start-btn">Start Recording</button>
    <button class="stop-btn">Stop Recording</button>
    <button class="download-btn">
      <a href="#" download="output.mp4" 
      class="download-anc" style="text-decoration:none ;">Download</a>
    </button>
  </div>
  <!-- <div class="fp-Video">
    <div id="screen-sharing" class="display"></div>
</div>
<br />
<button id="shareBtn">Share Screen</button> -->
</div>
<script >
var video = document.querySelector('.recording');
var output = document.querySelector('.output');
var start = document.querySelector('.start-btn');
var stop = document.querySelector('.stop-btn');
var anc = document.querySelector(".download-anc")
var data = [];

// In order record the screen with system audio
var recording = navigator.mediaDevices.getDisplayMedia({
video: {
    mediaSource: 'screen',
},
audio: true,
})
.then(async (e) => {

    // For recording the mic audio
    let audio = await navigator.mediaDevices.getUserMedia({ 
        audio: true, video: false })

    // Assign the recorded mediastream to the src object 
    video.srcObject = e;

    // Combine both video/audio stream with MediaStream object
    let combine = new MediaStream(
        [...e.getTracks(), ...audio.getTracks()])

    /* Record the captured mediastream
       with MediaRecorder constructor */
    let recorder = new MediaRecorder(combine);

    start.addEventListener('click', (e) => {

        // Starts the recording when clicked
        recorder.start();
        alert("recording started")

        // For a fresh start
        data = []
    });

    stop.addEventListener('click', (e) => {

        // Stops the recording  
        recorder.stop();
        alert("recording stopped")
    });

    /* Push the recorded data to data array 
      when data available */
    recorder.ondataavailable = (e) => {
        data.push(e.data);
    };

    recorder.onstop = () => {

        /* Convert the recorded audio to 
           blob type mp4 media */
        let blobData = new Blob(data, { type: 'video/mp4' });

        // Convert the blob data to a url
        let url = URL.createObjectURL(blobData)

        // Assign the url to the output video tag and anchor 
        output.src = url
        anc.href = url
    };
});
</script>
  <!--  -->
  </body>
</html>
